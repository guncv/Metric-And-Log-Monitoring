version: "3.8"

services:

  # -------------------- APP SERVICES --------------------
  demo-app-first:
    build:
      context: ./demo_app
      dockerfile: Dockerfile.first
    ports:
      - "5001:5001"
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  demo-app-second:
    build:
      context: ./demo_app
      dockerfile: Dockerfile.second
    ports:
      - "5002:5002"
      - "8002:8002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  demo-app-third:
    build:
      context: ./demo_app
      dockerfile: Dockerfile.third
    ports:
      - "5003:5003"
      - "8003:8003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # -------------------- METRIC MONITORING --------------------
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./metrics/alert.rules.yml:/etc/prometheus/alert.rules.yml
    depends_on:
      - demo-app-first
      - demo-app-second
      - demo-app-third
      - node-exporter
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana-storage:/var/lib/grafana
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./metrics/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/data
    environment:
      - SMTP_FROM=your_email@example.com
      - SMTP_USERNAME=your_email@example.com
      - SMTP_PASSWORD=your_secure_app_password
      - SMTP_TO=your_email@example.com
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    container_name: node-exporter
    restart: unless-stopped

  # -------------------- LOG MONITORING --------------------
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.6
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    restart: unless-stopped
  
  es-template-loader:
    image: curlimages/curl:latest
    depends_on:
      - elasticsearch
    volumes:
      - ./log_collections/log-template.json:/log-template.json
      - ./init_template.sh:/init_template.sh
    entrypoint: ["sh", "/init_template.sh"]
    restart: "no"


  fluent-bit:
    image: fluent/fluent-bit:latest
    ports:
      - "24224:24224"
    depends_on:
      - elasticsearch
    volumes:
      - ./log_collections/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./log_collections/parsers.conf:/fluent-bit/etc/parsers.conf
    command: ["fluent-bit", "-c", "/fluent-bit/etc/fluent-bit.conf"]
    restart: unless-stopped
  
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.6
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana-loader:
    image: curlimages/curl
    depends_on:
      - kibana
    volumes:
      - ./kibana/create_index.json:/kibana/create_index.json
      - ./init_kibana.sh:/init_kibana.sh
    entrypoint: ["sh", "/init_kibana.sh"]
    restart: "no"


volumes:
  grafana-storage:
  alertmanager-data:
